{
    "docs": [
        {
            "location": "/",
            "text": "zend-mvc-i18n\n\n\n\n\n\n\nzend-mvc-i18n provides integration between:\n\n\n\n\nzend-i18n\n\n\nzend-mvc\n\n\nzend-router\n\n\n\n\nand replaces the i18n functionality found in the v2 releases of the latter\ntwo components.\n\n\n\n\nFile issues at https://github.com/zendframework/zend-mvc-i18n/issues\n\n\nDocumentation is at https://docs.zendframework.com/zend-mvc-i18n/\n\n\n\n\nInstallation\n\n\n$ composer require zendframework/zend-mvc-i18n\n\n\n\nAssuming you are using the [component installer](https://docs.zendframework.com/zend-component-installer],\ndoing so will enable the component in your application, allowing you to\nimmediately start developing console applications via your MVC. If you are not,\nplease read the \nintroduction\n\nfor details on how to register the functionality with your application.\n\n\nFor use with zend-mvc v3 and up\n\n\nWhile this component has an initial stable release, please do not use it with\nzend-mvc releases prior to v3, as it is not compatible.\n\n\nMigrating from zend-mvc v2 i18n features to zend-mvc-i18n\n\n\nPlease see the \nmigration guide\n\nfor details on how to migrate your existing zend-mvc console functionality to\nthe features exposed by this component.",
            "title": "zend-mvc-i18n"
        },
        {
            "location": "/#zend-mvc-i18n",
            "text": "zend-mvc-i18n provides integration between:   zend-i18n  zend-mvc  zend-router   and replaces the i18n functionality found in the v2 releases of the latter\ntwo components.   File issues at https://github.com/zendframework/zend-mvc-i18n/issues  Documentation is at https://docs.zendframework.com/zend-mvc-i18n/",
            "title": "zend-mvc-i18n"
        },
        {
            "location": "/#installation",
            "text": "$ composer require zendframework/zend-mvc-i18n  Assuming you are using the [component installer](https://docs.zendframework.com/zend-component-installer],\ndoing so will enable the component in your application, allowing you to\nimmediately start developing console applications via your MVC. If you are not,\nplease read the  introduction \nfor details on how to register the functionality with your application.",
            "title": "Installation"
        },
        {
            "location": "/#for-use-with-zend-mvc-v3-and-up",
            "text": "While this component has an initial stable release, please do not use it with\nzend-mvc releases prior to v3, as it is not compatible.",
            "title": "For use with zend-mvc v3 and up"
        },
        {
            "location": "/#migrating-from-zend-mvc-v2-i18n-features-to-zend-mvc-i18n",
            "text": "Please see the  migration guide \nfor details on how to migrate your existing zend-mvc console functionality to\nthe features exposed by this component.",
            "title": "Migrating from zend-mvc v2 i18n features to zend-mvc-i18n"
        },
        {
            "location": "/intro/",
            "text": "Introduction\n\n\nZend Framework 2 offered functionality for integrating internationalization\ncapabilities provided by \nzend-i18n\n\ninto MVC applications. This support includes:\n\n\n\n\nregistration of an \nMvcTranslator\n service by default.\n\n\na \nDummyTranslator\n, for use when \next/intl\n is unavailable, or configuration\n  dictates that translations are disabled.\n\n\nan \nMvcTranslator\n, which implements both \nZend\\I18n\\Translator\\TranslatorInterface\n\n  and \nZend\\Validator\\TranslatorInterface\n, which decorates a\n  \nZend\\I18n\\Translator\\TranslatorInterface\n instance.\n\n\na \nTranslatorAwareTreeRouteStack\n, for enabling internationalized routing\n  segments.\n\n\n\n\nSince this functionality is entirely opt-in, we have decided that for version 3\nof zend-mvc, we will offer it as a standalone package, to install when required\nfor your applications.\n\n\nAdditionally, because it bridges multiple \nTranslatorInterface\n implementations,\nand provides i18n-capable routing, it can be useful with non-zend-mvc\napplications such as \nzend-expressive\n.\n\n\nInstallation\n\n\nBasic installation is via composer:\n\n\n$ composer require zendframework/zend-mvc-i18n\n\n\n\nAssuming you are using the \ncomponent installer\n,\ndoing so will automatically enable the component in your application.\n\n\nIf you are not using the component installer, you will need to add the entry:\n\n\n'Zend\\Mvc\\I18n'\n\n\n\nto your list of active modules. This is usually provided in one of the following\nfiles:\n\n\n\n\nconfig/application.config.php\n (vanilla ZF skeleton application)\n\n\nconfig/modules.config.php\n (Apigility application)\n\n\n\n\n\n\nManually enabling with zend-expressive\n\n\nIf you are not using the component-installer with zend-expressive, you will\nneed to add the entry:\n\n\n\\Zend\\Mvc\\I18n\\ConfigProvider::class\n\n\n\nto your \nconfig/config.php\n class, assuming you are already using\n\nexpressive-config-manager\n.\n\n\nIf you are not, add a new global \nconfig/autoload/\n file with the following contents:\n\n\n<?php\nuse Zend\\Mvc\\I18n\\ConfigProvider;\n\n$provider = new ConfigProvider();\nreturn $provider();\n\n\n\n\n\nMigration\n\n\nIn order to separate the i18n integration features from zend-mvc, we made a few\nminor changes. While most of these are under-the-hood implementation details,\nplease read the \nmigration guide\n to verify your\napplication will continue to work.",
            "title": "Intro"
        },
        {
            "location": "/intro/#introduction",
            "text": "Zend Framework 2 offered functionality for integrating internationalization\ncapabilities provided by  zend-i18n \ninto MVC applications. This support includes:   registration of an  MvcTranslator  service by default.  a  DummyTranslator , for use when  ext/intl  is unavailable, or configuration\n  dictates that translations are disabled.  an  MvcTranslator , which implements both  Zend\\I18n\\Translator\\TranslatorInterface \n  and  Zend\\Validator\\TranslatorInterface , which decorates a\n   Zend\\I18n\\Translator\\TranslatorInterface  instance.  a  TranslatorAwareTreeRouteStack , for enabling internationalized routing\n  segments.   Since this functionality is entirely opt-in, we have decided that for version 3\nof zend-mvc, we will offer it as a standalone package, to install when required\nfor your applications.  Additionally, because it bridges multiple  TranslatorInterface  implementations,\nand provides i18n-capable routing, it can be useful with non-zend-mvc\napplications such as  zend-expressive .",
            "title": "Introduction"
        },
        {
            "location": "/intro/#installation",
            "text": "Basic installation is via composer:  $ composer require zendframework/zend-mvc-i18n  Assuming you are using the  component installer ,\ndoing so will automatically enable the component in your application.  If you are not using the component installer, you will need to add the entry:  'Zend\\Mvc\\I18n'  to your list of active modules. This is usually provided in one of the following\nfiles:   config/application.config.php  (vanilla ZF skeleton application)  config/modules.config.php  (Apigility application)",
            "title": "Installation"
        },
        {
            "location": "/intro/#manually-enabling-with-zend-expressive",
            "text": "If you are not using the component-installer with zend-expressive, you will\nneed to add the entry:  \\Zend\\Mvc\\I18n\\ConfigProvider::class  to your  config/config.php  class, assuming you are already using expressive-config-manager .  If you are not, add a new global  config/autoload/  file with the following contents:  <?php\nuse Zend\\Mvc\\I18n\\ConfigProvider;\n\n$provider = new ConfigProvider();\nreturn $provider();",
            "title": "Manually enabling with zend-expressive"
        },
        {
            "location": "/intro/#migration",
            "text": "In order to separate the i18n integration features from zend-mvc, we made a few\nminor changes. While most of these are under-the-hood implementation details,\nplease read the  migration guide  to verify your\napplication will continue to work.",
            "title": "Migration"
        },
        {
            "location": "/routing/",
            "text": "Routing\n\n\nzend-router\n provides routing\ncapabilities for \nzend-mvc\n. In\nversion 2, these capabilities also included an opt-in feature of translatable\nroute segments.\n\n\nZend\\Router\\Http\\Segment\n has built-in facilities for translatable route\nsegments, but this functionality is disabled by default. To enable it, a\ntranslator must be present in the options provided when matching; such options\nare typically passed by the route stack invoking the segment.\n\n\nzend-mvc-i18n provides \nZend\\Mvc\\I18n\\Router\\TranslatorAwareTreeRouteStack\n to\ndo exactly that. If it is injected with a translator, it will pass the\ntranslator on to each segment when invoking \nmatch()\n.\n\n\nEnabling TranslatorAwareTreeRouteStack\n\n\nTo enable the \nTranslatorAwareTreeRouteStack\n in your application, you will need\nto add configuration that tells zend-mvc to use it instead of the default\nrouter. Additionally, you may want to indicate the translation locale and/or\ntext domain to use for translatable route segments.\n\n\nThe following is a configuration example that could be specified in a module or\nat the application level:\n\n\nuse Zend\\Mvc\\I18n\\Router\\TranslatorAwareTreeRouteStack;\n\nreturn [\n    'router' => [\n        'router_class'           => TranslatorAwareTreeRouteStack::class,\n        'translator_text_domain' => 'routing',\n    ],\n];\n\n\n\nThe above would configure and return a \nTranslatorAwareTreeRouteStack\n instance\nwhen the router is requested. The instance would be configured to use the\n\nrouting\n text domain, and injected with either the \nMvcTranslator\n or\n\nZend\\I18n\\Translator\\TranslatorInterface\n service (whichever is present, with\nthe former having precedence).\n\n\nThe \ntranslator_text_domain\n, when not present, defaults to \ndefault\n.\n\n\nTranslatable route segments\n\n\nAs a refresher, \nsegment routes\n\nallow you to define a combination of literal characters and placeholders;\nplaceholders are denoted by \n:name\n notation within the definition.\n\n\nTo create a translatable segment, you use an alternate notation,\n\n{translation-key}\n.\n\n\nWhen matching, the translator uses its locale and the text domain configured to\ntranslate translation keys in the route definition prior to attempting a match.\n\n\nAs an example, consider the following route definition:\n\n\n/{shopping_cart}/{products}/:productId\n\n\n\nThe above defines two translatable segments, \nshopping_cart\n and \nproducts\n.\nWhen attempting to match, these keys are passed to the translator. If, for\nexample, the locale evaluates to \nde-DE\n, these might become \neinkaufswagen\n and\n'produkte`, respectively, evaluating to:\n\n\n/einkaufswagen/produkte/:productId\n\n\n\nThis will then be what the router attempts to match against.",
            "title": "Routing"
        },
        {
            "location": "/routing/#routing",
            "text": "zend-router  provides routing\ncapabilities for  zend-mvc . In\nversion 2, these capabilities also included an opt-in feature of translatable\nroute segments.  Zend\\Router\\Http\\Segment  has built-in facilities for translatable route\nsegments, but this functionality is disabled by default. To enable it, a\ntranslator must be present in the options provided when matching; such options\nare typically passed by the route stack invoking the segment.  zend-mvc-i18n provides  Zend\\Mvc\\I18n\\Router\\TranslatorAwareTreeRouteStack  to\ndo exactly that. If it is injected with a translator, it will pass the\ntranslator on to each segment when invoking  match() .",
            "title": "Routing"
        },
        {
            "location": "/routing/#enabling-translatorawaretreeroutestack",
            "text": "To enable the  TranslatorAwareTreeRouteStack  in your application, you will need\nto add configuration that tells zend-mvc to use it instead of the default\nrouter. Additionally, you may want to indicate the translation locale and/or\ntext domain to use for translatable route segments.  The following is a configuration example that could be specified in a module or\nat the application level:  use Zend\\Mvc\\I18n\\Router\\TranslatorAwareTreeRouteStack;\n\nreturn [\n    'router' => [\n        'router_class'           => TranslatorAwareTreeRouteStack::class,\n        'translator_text_domain' => 'routing',\n    ],\n];  The above would configure and return a  TranslatorAwareTreeRouteStack  instance\nwhen the router is requested. The instance would be configured to use the routing  text domain, and injected with either the  MvcTranslator  or Zend\\I18n\\Translator\\TranslatorInterface  service (whichever is present, with\nthe former having precedence).  The  translator_text_domain , when not present, defaults to  default .",
            "title": "Enabling TranslatorAwareTreeRouteStack"
        },
        {
            "location": "/routing/#translatable-route-segments",
            "text": "As a refresher,  segment routes \nallow you to define a combination of literal characters and placeholders;\nplaceholders are denoted by  :name  notation within the definition.  To create a translatable segment, you use an alternate notation, {translation-key} .  When matching, the translator uses its locale and the text domain configured to\ntranslate translation keys in the route definition prior to attempting a match.  As an example, consider the following route definition:  /{shopping_cart}/{products}/:productId  The above defines two translatable segments,  shopping_cart  and  products .\nWhen attempting to match, these keys are passed to the translator. If, for\nexample, the locale evaluates to  de-DE , these might become  einkaufswagen  and\n'produkte`, respectively, evaluating to:  /einkaufswagen/produkte/:productId  This will then be what the router attempts to match against.",
            "title": "Translatable route segments"
        },
        {
            "location": "/services/",
            "text": "Services Defined\n\n\nzend-mvc-i18n defines the following services and related factories.\n\n\nTranslator\n\n\nZend\\Mvc\\I18n\\Translator\n implements each of\n\nZend\\I18n\\Translator\\TranslatorInterface\n (from\nzend-i18n) and implements \nZend\\Validator\\TranslatorInterface\n (from\nzend-validator), by decorating an \nZend\\I18n\\Translator\\TranslatorInterface\n\ninstance (typically a \nZend\\I18n\\Translator\\Translator\n instance).\n\n\nIt exists to allow bridging multiple translation interfaces, allowing it to be\nused in multiple contexts.\n\n\nDummyTranslator\n\n\nZend\\Mvc\\I18n\\DummyTranslator\n is an implementation of\n\nZend\\I18n\\Translator\\TranslatorInterface\n that essentially returns the\narguments provided to it unchanged.\n\n\nAs an example, calling:\n\n\n$translator->translate($message);\n\n\n\nwill return \n$message\n, and\n\n\n$translator->translatePlural($singular, $plural, $number);\n\n\n\nwill return \n$singular\n when \n$number\n is \n1\n, and \n$plural\n otherwise.\n\n\nMvcTranslator and TranslatorFactory\n\n\nThe component defines the \nMvcTranslator\n service, which is aliased to the\n\nZend\\Mvc\\I18n\\Translator\n class, and uses \nZend\\Mvc\\I18n\\TranslatorFactory\n to\ncreate and return the instance.\n\n\nThe point of the service is to ensure that a \nZend\\Mvc\\I18n\\Translator\n instance\nis returned, which enables usage across multiple contexts (see the \nTranslator\nsection\n, above).\n\n\nAs such, you should typically use the \nMvcTranslator\n service when injecting\nyour own classes with a translator instance:\n\n\nfunction ($container) {\n    return new YourServiceClass($container->get('MvcTranslator'));\n}\n\n\n\nThe \nTranslatorFactory\n will do the following:\n\n\n\n\nIf a \nZend\\I18n\\Translator\\TranslatorInterface\n service is registered, it will\n  be retrieved and decorated with a \nZend\\Mvc\\I18n\\Translator\n instance.\n\n\nIf the \"config\" service is defined in the container, has a \"translator\" key,\n  but the value of that key is boolean false, it returns a\n  \nZend\\Mvc\\I18n\\Translator\n instance wrapping a \nDummyTranslator\n instance.\n\n\nIf the \"config\" service is defined in the container, has a \"translator\" key,\n  and value is an array or \nTraversable\n set of configuration, it passes that to\n  \nZend\\I18n\\Translator\\Translator::factory()\n to create and return an instance.\n  That instance is then decorated with a \nZend\\Mvc\\I18n\\Translator\n.\n\n\n\n\nHttpRouterDelegatorFactory\n\n\nThe component registers a delegator factory on each of the \nHttpRouter\n and\n\nZend\\Router\\Http\\TreeRouteStack\n services. The delegator factory checks to see\nif the instance created is a \nZend\\Mvc\\I18n\\Router\\TranslatorAwareTreeRouteStack\n,\nand, if so:\n\n\n\n\nif the \nMvcTranslator\n service is present, it will inject it as the translator\n  before returning it.\n\n\nif the \nZend\\I18n\\Translator\\TranslatorInterface\n service is present, it will\n  inject it as the translator before returning it.\n\n\notherwise, it disables translation in the returned instance.",
            "title": "Default Services"
        },
        {
            "location": "/services/#services-defined",
            "text": "zend-mvc-i18n defines the following services and related factories.",
            "title": "Services Defined"
        },
        {
            "location": "/services/#translator",
            "text": "Zend\\Mvc\\I18n\\Translator  implements each of Zend\\I18n\\Translator\\TranslatorInterface  (from\nzend-i18n) and implements  Zend\\Validator\\TranslatorInterface  (from\nzend-validator), by decorating an  Zend\\I18n\\Translator\\TranslatorInterface \ninstance (typically a  Zend\\I18n\\Translator\\Translator  instance).  It exists to allow bridging multiple translation interfaces, allowing it to be\nused in multiple contexts.",
            "title": "Translator"
        },
        {
            "location": "/services/#dummytranslator",
            "text": "Zend\\Mvc\\I18n\\DummyTranslator  is an implementation of Zend\\I18n\\Translator\\TranslatorInterface  that essentially returns the\narguments provided to it unchanged.  As an example, calling:  $translator->translate($message);  will return  $message , and  $translator->translatePlural($singular, $plural, $number);  will return  $singular  when  $number  is  1 , and  $plural  otherwise.",
            "title": "DummyTranslator"
        },
        {
            "location": "/services/#mvctranslator-and-translatorfactory",
            "text": "The component defines the  MvcTranslator  service, which is aliased to the Zend\\Mvc\\I18n\\Translator  class, and uses  Zend\\Mvc\\I18n\\TranslatorFactory  to\ncreate and return the instance.  The point of the service is to ensure that a  Zend\\Mvc\\I18n\\Translator  instance\nis returned, which enables usage across multiple contexts (see the  Translator\nsection , above).  As such, you should typically use the  MvcTranslator  service when injecting\nyour own classes with a translator instance:  function ($container) {\n    return new YourServiceClass($container->get('MvcTranslator'));\n}  The  TranslatorFactory  will do the following:   If a  Zend\\I18n\\Translator\\TranslatorInterface  service is registered, it will\n  be retrieved and decorated with a  Zend\\Mvc\\I18n\\Translator  instance.  If the \"config\" service is defined in the container, has a \"translator\" key,\n  but the value of that key is boolean false, it returns a\n   Zend\\Mvc\\I18n\\Translator  instance wrapping a  DummyTranslator  instance.  If the \"config\" service is defined in the container, has a \"translator\" key,\n  and value is an array or  Traversable  set of configuration, it passes that to\n   Zend\\I18n\\Translator\\Translator::factory()  to create and return an instance.\n  That instance is then decorated with a  Zend\\Mvc\\I18n\\Translator .",
            "title": "MvcTranslator and TranslatorFactory"
        },
        {
            "location": "/services/#httprouterdelegatorfactory",
            "text": "The component registers a delegator factory on each of the  HttpRouter  and Zend\\Router\\Http\\TreeRouteStack  services. The delegator factory checks to see\nif the instance created is a  Zend\\Mvc\\I18n\\Router\\TranslatorAwareTreeRouteStack ,\nand, if so:   if the  MvcTranslator  service is present, it will inject it as the translator\n  before returning it.  if the  Zend\\I18n\\Translator\\TranslatorInterface  service is present, it will\n  inject it as the translator before returning it.  otherwise, it disables translation in the returned instance.",
            "title": "HttpRouterDelegatorFactory"
        },
        {
            "location": "/migration/v2-to-v3/",
            "text": "Migration: zend-mvc v2 to zend-mvc-i18n\n\n\nzend-mvc-i18n ports all i18n integration functionality from the zend-mvc v2\nrelease to a single component. As such, a number of classes were renamed that\ncould potentially impact end-users.\n\n\nTranslatorAwareTreeRouteStack\n\n\nZend\\Mvc\\Router\\Http\\TranslatorAwareTreeRouteStack\n was renamed to\n\nZend\\Mvc\\I18n\\Router\\TranslatorAwareTreeRouteStack\n. It functions exactly as\nthe original, however, including accepting the same configuration.\n\n\nTranslatorServiceFactory\n\n\nZend\\Mvc\\Service\\TranslatorServiceFactory\n was renamed to\n\nZend\\Mvc\\I18n\\TranslatorFactory\n. Behavior remains the same.\n\n\nExceptions thrown by the MVC translator\n\n\nIn v2 releases, \nZend\\Mvc\\I18n\\Translator\n would throw exceptions from the\n\nZend\\Mvc\\Exception\n namespace. It now throws exceptions from the new\n\nZend\\Mvc\\I18n\\Exception\n namespace.",
            "title": "Version 2 to Version 3"
        },
        {
            "location": "/migration/v2-to-v3/#migration-zend-mvc-v2-to-zend-mvc-i18n",
            "text": "zend-mvc-i18n ports all i18n integration functionality from the zend-mvc v2\nrelease to a single component. As such, a number of classes were renamed that\ncould potentially impact end-users.",
            "title": "Migration: zend-mvc v2 to zend-mvc-i18n"
        },
        {
            "location": "/migration/v2-to-v3/#translatorawaretreeroutestack",
            "text": "Zend\\Mvc\\Router\\Http\\TranslatorAwareTreeRouteStack  was renamed to Zend\\Mvc\\I18n\\Router\\TranslatorAwareTreeRouteStack . It functions exactly as\nthe original, however, including accepting the same configuration.",
            "title": "TranslatorAwareTreeRouteStack"
        },
        {
            "location": "/migration/v2-to-v3/#translatorservicefactory",
            "text": "Zend\\Mvc\\Service\\TranslatorServiceFactory  was renamed to Zend\\Mvc\\I18n\\TranslatorFactory . Behavior remains the same.",
            "title": "TranslatorServiceFactory"
        },
        {
            "location": "/migration/v2-to-v3/#exceptions-thrown-by-the-mvc-translator",
            "text": "In v2 releases,  Zend\\Mvc\\I18n\\Translator  would throw exceptions from the Zend\\Mvc\\Exception  namespace. It now throws exceptions from the new Zend\\Mvc\\I18n\\Exception  namespace.",
            "title": "Exceptions thrown by the MVC translator"
        }
    ]
}